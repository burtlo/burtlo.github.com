<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Franklin Webber]]></title>
  <link href="https://burtlo.github.com/atom.xml" rel="self"/>
  <link href="https://burtlo.github.com/"/>
  <updated>2012-09-24T13:30:44-04:00</updated>
  <id>https://burtlo.github.com/</id>
  <author>
    <name><![CDATA[Franklin Webber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pull Requests from Terminal]]></title>
    <link href="https://burtlo.github.com/blog/2012/09/11/pull-requests-from-terminal/"/>
    <updated>2012-09-11T09:30:00-04:00</updated>
    <id>https://burtlo.github.com/blog/2012/09/11/pull-requests-from-terminal</id>
    <content type="html"><![CDATA[<p>Several companies are using Github as a source repository solution. Many teams have adopted a great workflow that involves opening a pull request when a feature is complete. Using Github to code review a new feature or fix is awesome . Anything that promotes more communication and review of ones code is awesome.</p>

<p>The process goes something like this:</p>

<ul>
<li>Start a new feature branch</li>
<li>Implement feature within the branch</li>
<li>Push the branch to Github</li>
<li>View completed branch within Github</li>
<li>Open pull request for new branch</li>
</ul>


<p>Reviewing the steps I noted the primary tools used to accomplish them:</p>

<ul>
<li>(terminal,git)    - Start a new feature branch</li>
<li>(terminal,editor) - Implement feature within the branch</li>
<li>(terminal,git)    - Push the branch to Github</li>
<li>(browser)         - View completed branch within Github</li>
<li>(browser)         - Open pull request for new branch</li>
</ul>


<p>What stood out to me was how the final stages of this process stood out. It was then that I sought to remedy that.</p>

<p>With the help of the <a href="http://defunkt.io/hub/">hub</a> and a little bash I created a single command to allow me to perform a pull request from the command-line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>pull-request <span class="o">{</span>
</span><span class='line'>  hub pull-request -h <span class="k">$(</span>__github_remote_origin<span class="k">)</span>:<span class="k">$(</span>__github_current_branch<span class="k">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>__github_current_branch <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$1`git branch --no-color 2&gt; /dev/null | sed -e &#39;/^[^*]/d&#39; -e &#39;s/* \(.*\)/\1/&#39;`&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>__github_remote_origin <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$1`git remote -v | grep &quot;</span><span class="o">(</span>push<span class="o">)</span><span class="s2">&quot; | sed &quot;</span>s#origin.*:<span class="se">\(</span><span class="o">[</span>^/<span class="o">]</span>*<span class="se">\)</span>.*push.*#<span class="se">\1</span><span class="c">#&quot;`&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hub&#8217;s <code>pull-request</code> command by itself was great when I was working within my own projects but failed to generate the correct pull request targets when I was working on a project that belonged to an organization.</p>

<p>This small change allows me to combine the last two steps of the workflow into a single step as well as bring it more in-line with the other tools in the entire process.</p>

<h3>Installation</h3>

<p>Install <a href="http://defunkt.io/hub/">hub</a> from brew.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install hub
</span></code></pre></td></tr></table></div></figure>


<p>Open your <code>.bash_profile</code> or <code>.bashrc</code> and add the following lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>pull-request <span class="o">{</span>
</span><span class='line'>  hub pull-request -h <span class="k">$(</span>__github_remote_origin<span class="k">)</span>:<span class="k">$(</span>__github_current_branch<span class="k">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>__github_current_branch <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$1`git branch --no-color 2&gt; /dev/null | sed -e &#39;/^[^*]/d&#39; -e &#39;s/* \(.*\)/\1/&#39;`&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>__github_remote_origin <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$1`git remote -v | grep &quot;</span><span class="o">(</span>push<span class="o">)</span><span class="s2">&quot; | sed &quot;</span>s#origin.*:<span class="se">\(</span><span class="o">[</span>^/<span class="o">]</span>*<span class="se">\)</span>.*push.*#<span class="se">\1</span><span class="c">#&quot;`&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save and exit. Run the source command to use your updated bash commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the pull-request command should launch your GIT_EDITOR or EDITOR to compose the pull request message.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRB Is Not For Beginners]]></title>
    <link href="https://burtlo.github.com/blog/2012/06/01/irb-is-not-for-beginners/"/>
    <updated>2012-06-01T16:13:00-04:00</updated>
    <id>https://burtlo.github.com/blog/2012/06/01/irb-is-not-for-beginners</id>
    <content type="html"><![CDATA[<p>Several introductory tutorials use IRB as a tool to show off Ruby to new
developers. I can understand the allure of using IRB:</p>

<blockquote><ul>
<li><p>does not require the user to create a file</p></li>
<li><p>immediate feedback for their actions</p></li>
</ul>
</blockquote>

<p>In my experience, using IRB is fraught with far too much peril to make it a
valuable learning tool.</p>

<blockquote><ul>
<li><p>unable to visualize all the code that they have written</p></li>
<li><p>navigation in IRB is much harder than in an editor</p></li>
<li><p>state of the code is lost when exiting IRB</p></li>
</ul>
</blockquote>

<h2>does not require the user to create a file</h2>

<p>It is a major boon that the user does not have to create a file to get started.
However, it becomes a major pain if the example starts to span multiple lines
or requires particular step-by-step code to be completed.</p>

<p>Given that a user will want to learn by re-typing all the code they see in an
example, they are likely to make a mistake during the data entry process and
because of the poor, console like, interaction provided to the user they will
often be unable to use any of the code that follows the mistake.</p>

<p>From a troubleshooting point of view, it is extremely difficult to have the user
move back through their command history (Up-Arrow) multiple times to find the
issue.</p>

<p>Eventually your examples will have to exist in a file and while it seems like
a headache from the start to have the user create a file for them to copy the
example or write their code in, it is simply where they are going to end up.</p>

<blockquote><p>Examples longer than a single line should be written in a file (not IRB).</p></blockquote>

<h2>immediate feedback for their actions</h2>

<p>I do rather enjoy this feature of IRB over using a text file. When a user
finishes a line and presses the <em>enter</em> key, they are immediately treated with
feedback to the code that they wrote. It&#8217;s like chatting with <em>Rainman</em>; able
to repeat what you tell it and solve complex math problems quickly.</p>

<p>It is great when it works. It is a great failure when it does not work.</p>

<p>The great failure I am talking about is the first time in an example you ask
a new developer to perform any operation that has an opening element and a
closing element.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>001 &gt; puts "Hello World'
</span><span class='line'>002"&gt; _</span></code></pre></td></tr></table></div></figure>


<p>Instead of getting immediate feedback, the user is treated with what appears to
them as a broken console. They are not even able to exit! Everything they start
type in at this point stops working as it once did. All because they opened a
string with a <code>"</code> and closed it with a <code>'</code>.</p>

<p>This only gets worse when they start to use more of these required starting
and ending elements in Arrays, Hashes, Methods, and Blocks.</p>

<blockquote><p>Limit your IRB examples that use starting-ending elements</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD Is Not For New Developers]]></title>
    <link href="https://burtlo.github.com/blog/2012/05/30/tdd-is-not-for-new-developers/"/>
    <updated>2012-05-30T20:04:00-04:00</updated>
    <id>https://burtlo.github.com/blog/2012/05/30/tdd-is-not-for-new-developers</id>
    <content type="html"><![CDATA[<p>I recently had the opportunity to instruct several new developers in the nuances
of the Ruby language.</p>

<p>There is a strong emphasis now for developers to test drive their development.
Several of the exercises utilized tests as a safety net. Other exercises did
have them write code to make tests pass.</p>

<p>Despite what I would call a solid upbringing the students do not immediately
reach for their test framework when they start working on new exercises. It
just does not feel comfortable trying to write tests when you barely have an
understanding of the complexity of the problem and the scope of the language.</p>

<p>To those of us polyglots, now working in our third or fourth language we find
it a far easier venture. I think we should think twice before we require,
enforce, or guilt new developers writing software to bring with them tests in
tow.</p>

<p>Test Driven Development requires a much greater level of mastery and
understanding than we often give credit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clapping For Apple]]></title>
    <link href="https://burtlo.github.com/blog/2012/05/30/clapping-for-apple/"/>
    <updated>2012-05-30T00:06:00-04:00</updated>
    <id>https://burtlo.github.com/blog/2012/05/30/clapping-for-apple</id>
    <content type="html"><![CDATA[<p>When I first started watching the Apple Developer videos, that are available
through the iOS Dev Center, I was always amused by the participants at the talks
clapping throughout various demonstrations. The presented feature would likely
be saving the developers a new heap of time or give them a new tool for their
belt. It&#8217;s become a bit of a joke over the last few weeks. A fellow developer
will be dragging-and-dropping some code object into a storyboard or xib file and
I will start clapping. Always amusing when it&#8217;s dropping a textfield.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode's Project File Makes It Hard]]></title>
    <link href="https://burtlo.github.com/blog/2012/05/30/xcodes-project-file-makes-it-hard/"/>
    <updated>2012-05-30T00:05:00-04:00</updated>
    <id>https://burtlo.github.com/blog/2012/05/30/xcodes-project-file-makes-it-hard</id>
    <content type="html"><![CDATA[<p>iOS developers, as most other developers, give software away. A few months ago
when I started down the path of iOS development I was saddened by the lack of
community software in comparison to my experiences with Ruby. Namely I was
saddened by the fact that there was no easy way to discover software libraries
and tools. I was wrong. They have a community and there are definitely resources
to assist with finding iOS software and components. However, it is still hard to
integrate software into an existing application. By hard, I mean it&#8217;s a fairly
manual process of downloading/cloning a repository and then manually importing
files into the Xcode project file. Oh, the Xcode project file we will have to
talk more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developers Make Terrible 'X']]></title>
    <link href="https://burtlo.github.com/blog/2012/05/30/developers-make-terrible-x/"/>
    <updated>2012-05-30T00:04:00-04:00</updated>
    <id>https://burtlo.github.com/blog/2012/05/30/developers-make-terrible-x</id>
    <content type="html"><![CDATA[<p>Developers make terrible testers &#8230; and designers and &#8230; likely anything other
than a developer. In reality I think that most people that attempt to handle
more than one concern at a given moment are generally bad at any of the
supplementary tasks.</p>

<p>I am not trying to say that I am an exception to this rule, but I will say that
when I attempt to test something or put a little design on top of it while I am
still in the midst of delivering development aspects I will often times do
terrible work. Just awful.</p>

<p>The process I use to get this to work is to deliver on my development tasks.
Take a break. Return to the work, rested and ready to test it or do some design
for it. If it sounds familiar - it is! It is exactly the strategy that most
every instructor has presented to you about writing and editing your own essays.</p>

<p>Of course, there is no hope for you if finishing the work the night before. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting More Out Of Our Documentation (By Putting More In It)]]></title>
    <link href="https://burtlo.github.com/blog/2012/05/30/getting-more-out-of-our-documentation-by-putting-more-in-it/"/>
    <updated>2012-05-30T00:03:00-04:00</updated>
    <id>https://burtlo.github.com/blog/2012/05/30/getting-more-out-of-our-documentation-by-putting-more-in-it</id>
    <content type="html"><![CDATA[<p>I came to Ruby by way of Cucumber. Cucumber placed an emphasis on writing tests
that described the products behavior. Ideally Product Owners at the helm,
authoring your requirements. No good tools were made available to provide
documentation for the stakeholders. Out of necessity, I created an extension for
YARD. I started to work on another extension for RSpec. I even started playing
with integrating Bundler. Through this experimentation I realized how little our
documentation tells us as stakeholders, testers, and developers.</p>

<p>Tests are documentation; but they are not in our documentaiton.</p>

<p>So I would like to help champion the continual war to encourage documentation by
building tools that make better documentation from what has already been
written. In that spirit I built an
<a href="https://github.com/burtlo/yard-docco">extension</a> that generates better
documentation with the comments made within methods themselves: annotated source
code (docco style).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roles May Be The Death Of Me]]></title>
    <link href="https://burtlo.github.com/blog/2012/05/30/roles-may-be-the-death-of-me/"/>
    <updated>2012-05-30T00:02:00-04:00</updated>
    <id>https://burtlo.github.com/blog/2012/05/30/roles-may-be-the-death-of-me</id>
    <content type="html"><![CDATA[<p>Classification is useful; roles help define responsibilities. However, giving definition to something lends itself also to restriction. And this can be the unnecessary impedance or death of small systems.
Within the small development team I work we have often confined ourselves to roles.</p>

<p>Within the company our development efforts are geared towards a particular cause.</p>

<p>When new concerns arise that fall outside the concerns of the individual role or the entire team it is not clear who or how they will be addressed&#8230; and often could be lost.</p>

<p>Perhaps it is simply applying a system or a mindset in the military where your rank, in most cases, influences a level of pay and expertise. You are ultimately and at your core a soldier which can be applied to solve problems.</p>

<p>It seems we encapsulate that at the current moment. I am a Software Developer 2.</p>

<p>So maybe it is a cultural shift that the goals of the company ultimately outweigh the goals of the role.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Universal Frameworks for iOS made easy!]]></title>
    <link href="https://burtlo.github.com/blog/2012/03/25/universal-frameworks-for-ios-made-easy/"/>
    <updated>2012-03-25T15:58:00-04:00</updated>
    <id>https://burtlo.github.com/blog/2012/03/25/universal-frameworks-for-ios-made-easy</id>
    <content type="html"><![CDATA[<p>On a recent iOS project we wanted to integrate the
<a href="https://github.com/facebook/facebook-ios-sdk">Facebook iOS SDK</a>. The
integration went smoothy. We copied in the compiled library and the required
headers and were able to focus on the login, authentication flow.</p>

<h2>Problem</h2>

<p>However, we later ran into trouble with the library working on the device but
not in the simulator. We would fix it for the tests and the simulator but find
out we had broken it again for the device. This back and forth continued until we had found out about Universal Frameworks.</p>

<h2>Narrative</h2>

<p>We needed to compile the library in a format that would work on both on the
iPhone and the simulator. Google lead us to this <a href="http://db-in.com/blog/2011/07/universal-framework-iphone-ios-2-0/">invaluable post</a>
that outlined the arduous path of creating a universal framework. A journey
indeed filled with peril as there are so many opportunities along the way to
take a misstep and lose your way.</p>

<p>To the author&#8217;s credit, he does a good job of outlining the necessary steps to
succeed. It is the shear overwhelming number of Xcode&#8217;s <a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html">build settings</a>
that can get in the way with crossing the finish line.</p>

<p>As the project continued we came again to a similar crossroads as we needed to
include Twitter authentication. We chose to use the
<a href="https://github.com/thekarladam/MPOAuth">MPOAuth</a>
library but again found the need to generate a universal framework to save us
from the same particular annoyance (and others) that arose when it came time to
integrate the library. We followed through the same treacherous steps.</p>

<p>Having to do this twice has taught me that I do not want to do it again. There
is simply too many steps to get right. It was something that needed to be easier
and involve a lot less mouse-driven-development.</p>

<h2>Solution</h2>

<p><a href="https://github.com/rayh/xcoder">Xcoder</a> had the majority of the functionality to get started. However, it did
not have the ability to create some core components like: Aggregate Targets,
Copy Headers Build Phases, Run Script Build Phases.  At least it did not until
this <a href="https://github.com/rayh/xcoder/pull/24">weekend</a>.</p>

<p>I have created a <a href="https://gist.github.com/2201621">gist</a> that will generate a
universal framework with sources and header files. This should successfully
boil the the multiple page <a href="http://db-in.com/blog/2011/07/universal-framework-iphone-ios-2-0/">instructions</a> into roughly 100 lines of ruby code.</p>

<p>Perhaps the most valuable part is the ability to set the multitude of required
build settings, previously requiring deft configuration hunter skills, simply
with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">target</span><span class="o">.</span><span class="n">create_configurations</span> <span class="ss">:release</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">always_search_user_paths</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">architectures</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;$(ARCHS_STANDARD_32_BIT)&quot;</span><span class="p">,</span> <span class="s1">&#39;armv6&#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">copy_phase_strip</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">dead_code_stripping</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">debug_information_format</span> <span class="o">=</span> <span class="s2">&quot;dwarf-with-dsym&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">c_language_standard</span> <span class="o">=</span> <span class="s1">&#39;gnu99&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">enable_objc_exceptions</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">generate_debugging_symbols</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">precompile_prefix_headers</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">gcc_version</span> <span class="o">=</span> <span class="s1">&#39;com.apple.compilers.llvm.clang.1_0&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">warn_64_to_32_bit_conversion</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">warn_about_missing_prototypes</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">install_path</span> <span class="o">=</span> <span class="s2">&quot;$(LOCAL_LIBRARY_DIR)/Bundles&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">link_with_standard_libraries</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">mach_o_type</span> <span class="o">=</span> <span class="s1">&#39;mh_object&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">macosx_deployment_target</span> <span class="o">=</span> <span class="s1">&#39;10.7&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">product_name</span> <span class="o">=</span> <span class="s1">&#39;$(TARGET_NAME)&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">sdkroot</span> <span class="o">=</span> <span class="s1">&#39;iphoneos&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">valid_architectures</span> <span class="o">=</span> <span class="s1">&#39;$(ARCHS_STANDARD_32_BIT)&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">wrapper_extension</span> <span class="o">=</span> <span class="s1">&#39;framework&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">info_plist_location</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">prefix_header</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building iOS Apps in the Shell]]></title>
    <link href="https://burtlo.github.com/blog/2012/02/29/building-ios-app-in-the-shell/"/>
    <updated>2012-02-29T11:53:00-05:00</updated>
    <id>https://burtlo.github.com/blog/2012/02/29/building-ios-app-in-the-shell</id>
    <content type="html"><![CDATA[<p>The current state of iOS command-line tools for iOS is abysmal especially if you
are familiar and comfortable with a particular feedback loop for building,
testing, and deploying. It is code savagery! Plain and simple!</p>

<h2>Problem</h2>

<p>I wanted the ability to easily build Xcode targets from bash.</p>

<h2>Narrative</h2>

<p>As an iOS developer, if you use any testing library requiring an additional,
independent target you find yourself within Xcode re-selecting targets and
platforms during development to validate functionality. Xcode&#8217;s programming is
predominately Mouse-Driven Development (MDD) and great for initial discovery but
that begins to break down as you start to identify multi-target operations you
want to perform quickly. This operation of switching targets/platforms is a
small cost if you write a lot of test or application code up front. This fails
when you want to test drive your development as this small operational cost adds
up as you begin to refine your feedback loop.</p>

<p>A project Substantial inherited came with a rudimentary <code>Rakefile</code> with a number
of tasks and helper methods defined to assist with building and testing an iOS
application from the command-line. It was awesome! As long as I did not block
the IOS simulator I could write code and tests and get more immediate feedback.</p>

<p>Sadly, it was largely wrong: composed of a number of variables and hard-coded
values that were based on assumptions of how the project was built. We hit our
first major problem upgrading all the developers from Xcode 3.x to Xcode 4.x.
All of our command-line tools and files broke and that quick feedback loop we
became accustomed to broke down. Because of it our team and others delivered
functionality that broke several tests that we later, out of context, struggled
to resolve.</p>

<p>With the start of our next project I immediately ported over the
<a href="https://gist.github.com/1953158">Rakefile</a> and took the opportunity to clean it
up. In a small amount of time I created some code that I was reasonably happy
with but again worried about having to drag a gist of code from project to
project. I thought about future me and I wanted to ensure I did not have to
remember any of this every again unless I absolutely needed.</p>

<h2>Solution</h2>

<p>It was then I went on the search for software to save me. It was then that I
stumbled upon <a href="http://rayh.com.au/">Rayh</a>&#8217;s
<a href="https://github.com/rayh/xcoder">xcoder</a>. I was able to throw away 200+ lines of
Rakefile to more elegantly write the following:</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;xcoder&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="ss">:specs</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:specs</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Xcode</span><span class="o">.</span><span class="n">project</span><span class="p">(</span><span class="s1">&#39;TestProject&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">target</span><span class="p">(</span><span class="s1">&#39;Specs&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">config</span><span class="p">(</span><span class="s1">&#39;Debug&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">builder</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gorgeous! And more importantly exceedingly more portable when I want to get
started on the right foot. To make this ever more portable I recently added
default rake tasks to the <a href="https://github.com/rayh/xcoder">xcoder</a> gem that adds
all your Xcode projects in your default directory available through rake.</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;xcoder/rake_task&#39;</span>
</span><span class='line'><span class="no">Xcode</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which will generate several common tasks for each of your projects > targets >
configurations</p>

<figure class='code'><figcaption><span>rake output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake xcode:test_project:specs:debug:build                   <span class="c"># Build TestProject Specs Debug</span>
</span><span class='line'>rake xcode:test_project:specs:debug:clean                   <span class="c"># Clean TestProject Specs Debug</span>
</span><span class='line'>rake xcode:test_project:specs:debug:package                 <span class="c"># Package TestProject Specs Debug</span>
</span><span class='line'>rake xcode:test_project:specs:debug:test                    <span class="c"># Test TestProject Specs Debug</span>
</span><span class='line'>rake xcode:test_project:specs:release:build                 <span class="c"># Build TestProject Specs Release</span>
</span><span class='line'>rake xcode:test_project:specs:release:clean                 <span class="c"># Clean TestProject Specs Release</span>
</span><span class='line'>rake xcode:test_project:specs:release:package               <span class="c"># Package TestProject Specs Release</span>
</span><span class='line'>rake xcode:test_project:specs:release:test                  <span class="c"># Test TestProject Specs Release</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the <code>Rakefile</code> looks something like:</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;xcoder/rake_task&#39;</span>
</span><span class='line'><span class="no">Xcode</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="s2">&quot;xcode:text_project:specs:debug:build&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The benefit is that <a href="(https://github.com/rayh/xcoder">Xcoder</a> is leveraging the
project file to generate the correct <code>xcodebuild</code> operation allowing your build
to remain in lock-step with the Xcode environment as you build and test your
product in a headless environment.</p>
]]></content>
  </entry>
  
</feed>
